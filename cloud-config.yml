#cloud-config

coreos:

  units:

    # Conditionally formats the attached volume if it
    # has not yet already been formatted.
    - name: format-volume.service
      command: start
      content: |
        [Unit]
        Description=Formats the volume drive
        Requires=dev-vdb.device
        After=dev-vdb.device
        ConditionFirstBoot=true

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/bash -c '( \
          /usr/bin/lsblk --fs | \
          grep --silent vdb | \
          grep --silent ext4 \
        ) || ( \
          /usr/sbin/wipefs -f /dev/vdb && \
          /usr/sbin/mkfs -t ext4 /dev/vdb \
        )'

    # Mounts the attached volume to the file system
    # under /media/volume.
    - name: media-volume.mount
      command: start
      content: |
        [Unit]
        Description=Mount volume to /media/volume
        Requires=dev-vdb.device
        After=dev-vdb.device

        [Mount]
        What=/dev/vdb
        Where=/media/volume
        Type=ext4

    # Creates the base home directory in the attached
    # volume ready to accept shared user home directories.
    - name: media-volume-home.service
      command: start
      content: |
        [Unit]
        Description=Create /media/volume/home directory
        Requires=media-volume.mount
        After=media-volume.mount
        ConditionFirstBoot=true

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/mkdir --parents /media/volume/home

    - name: group-jenkins.service
      command: start
      content: |
        [Unit]
        Description=Create Jenkins group
        ConditionFirstBoot=true

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/groupadd --gid 1000 jenkins

    - name: user-jenkins.service
      command: start
      content: |
        [Unit]
        Description=Create Jenkins user
        Requires=media-volume.mount group-jenkins.service
        After=media-volume.mount group-jenkins.service
        ConditionFirstBoot=true

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/useradd --uid 1000 \
          --create-home \
          --home-dir /media/volume/home/jenkins \
          --gid jenkins \
          --shell /sbin/nologin \
          jenkins

    - name: docker-jenkins-create.service
      command: start
      content: |
        [Unit]
        Description=Create Jenkins container
        Requires=user-jenkins.service
        After=docker.service
        ConditionFirstBoot=true

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/docker create \
          --volume /media/volume/home/jenkins:/var/jenkins_home \
          --publish 8080:8080 \
          --memory-reservation 768m \
          --memory 768m \
          --memory-swap 1024m \
          --cpu-shares 1024 \
          --name jenkins \
          --env "JAVA_OPTS=-Xmx512m -XX:MaxMetaspaceSize=128m" \
          jenkins:alpine

    - name: docker-jenkins.service
      command: start
      content: |
        [Unit]
        Description=Jenkins container
        After=docker-jenkins-create.service

        [Service]
        Restart=Always
        ExecStart=/usr/bin/docker start --attach jenkins
        ExecStop=/usr/bin/docker stop jenkins

  oem:
    id: openstack
    name: Openstack
    version-id: 0.0.6
    home-url: https://www.openstack.org/
    bug-report-url: https://github.com/coreos/bugs/issues
